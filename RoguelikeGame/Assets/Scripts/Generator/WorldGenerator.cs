using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UIElements;

using static UnityEngine.Random;

public class WorldGenerator : MonoBehaviour
{
    // Singleton
    public static WorldGenerator _Instance;
    
    public LocationType CurrentLocation = LocationType.Seriantatum;

    // Maximum number of rooms in one location. Total number of rooms:
    // (кол-во локаций) * _MaxLengthOfLocation + (0; _SpreadOfLength)
    [SerializeField] int _MaxLengthOfLocation = 20;

    // Spread of length for 1 location
    [SerializeField] int _SpreadOfLength = 5;

    // Variable for count of room in one location
    //int _CurrentLengthOfLocation = 0;

    // This variable used for storing all room which can be generated.
    // RoomPair represents rooms by location type and room type
    public List<RoomPair> AllRooms = new();

    void Awake()
    {
        if (_Instance == null)
        { 
            _Instance = this; 
        }
        else if (_Instance == this)
        { 
            Destroy(gameObject);
        }

        DontDestroyOnLoad(gameObject);

        WorldManager._Instance.SpawnItem(typeof(Emerald), WorldManager._Instance._CurrentLevel.transform.GetChild(0).transform.position);

        WorldManager._Instance.SpawnItem(typeof(FruitGlowBash), new Vector3(1, 1, 0));

    }

    /// <summary>
    /// Generates new room with given room type.
    /// Deletes Old Room saved in World Manager.
    /// Spawns new room. Non-picked items will be also deleted.
    /// </summary>
    /// <param name="roomType">Type of room to Generate</param>
    public void Generate(RoomType roomType)
    {
        // Get prefab of random room
        var roomObject = GetRandomRoom(CurrentLocation, roomType);

        if (!roomObject) return;

        // Destroy old room
        Destroy(WorldManager._Instance._CurrentLevel);

        // Create picked room
        roomObject = Instantiate(roomObject);



        // apply it to manager
        WorldManager._Instance._CurrentLevel = roomObject;

        var roomComponent = roomObject.GetComponent<Room>();

        // Move player to start pos
        _PlayerController._Instance.transform.position = roomComponent._PlayerPosition.position;

        // Get all NextRoomTriggers Before changing it
        roomComponent.FindAllReferences();
        
        RoomBuilder builder = new(roomComponent);

        builder.WithPercentOfTriggers(.5f);
        builder.WithPercentOfCrates(.5f);
        builder.WithPercentOfObstacles(.8f);
        
        GameTrials.GetInstance().StartRandomTrial();
    }

    /// <summary>
    /// Gets random room from AllRooms variable by params. Only this rooms can be generated by
    /// Generate method.
    /// </summary>
    /// <param name="loc"></param>
    /// <param name="room"></param>
    /// <returns></returns>
    public GameObject GetRandomRoom(LocationType loc, RoomType room)
    {
        List<GameObject> rooms = new();

        foreach (RoomPair roomPair in AllRooms)
        {
            if (roomPair.Room == room && roomPair.Location == loc)
                rooms = roomPair.Rooms;

            var res = AllRooms.Find(r => r.Room == room);

            
        }   

        if (rooms.Count == 0)
        {
            Debug.LogError($"There is no Rooms for {loc} and {room} pair");
            return null;
        }

        return rooms[Range(0, rooms.Count)];
    }

    // Only for test
    public GameObject TryGetRandomRoom(LocationType loc, RoomType roomType)
    {
        int attempts = 1000;
        GameObject room = null;
        while (!room && attempts > 0) 
        {
            room = GetRandomRoom(loc, roomType);
            attempts--;
        }

        if (!room) Debug.LogError($"Cant find {roomType} in {loc}");


        return room;
    }

}

[Serializable] 
public class RoomPair
{
    public LocationType    Location;
    public RoomType        Room;

    public List<GameObject> Rooms = new();

    public RoomPair(LocationType location, RoomType room) {  Location = location; Room = room; }
}

public class RoomBuilder
{
    public RoomBuilder(Room room)
    {
        if (!room)
            Debug.LogError("room is null");

        _Room = room;
    }

    private Room _Room;


    /// <summary>
    /// Minimum 1 Trigger will be activated
    /// </summary>
    /// <param name="percentOfTriggers">Range(0f, 1f)</param>
    public void WithPercentOfTriggers(float percentOfTriggers)
    {
        if (percentOfTriggers < 0f || percentOfTriggers > 1f)
        {
            Debug.LogError("percentOfTriggers != Range(0f, 1f)");
            return;
        }

        var arr = _Room.GetListOfNextRoomTriggers();

        if (arr.Count == 0)
        {
            Debug.LogError("Room doesnt have exit triggers!");
            return;
        }

        bool isMinimumCountOfTriggersActivated = false;
        foreach (var nextRoomTrigger in arr)
        {
            if (!nextRoomTrigger || !nextRoomTrigger.GetActivated()) continue;

            if (!isMinimumCountOfTriggersActivated || percentOfTriggers < Range(0f, 1f))
            {
                RoomType r = (RoomType)Range(0, Enum.GetValues(typeof(RoomType)).Length);

                nextRoomTrigger.SetNextRoomForSpawn(r);

                isMinimumCountOfTriggersActivated = true;

                nextRoomTrigger.SetActivated(true);
            }
            else
            {
                nextRoomTrigger.SetActivated(false);
            }
        }

    }

    public void WithPercentOfCrates(float percent)
    {
        if (percent < 0f || percent > 1f)
        {
            Debug.LogError("percent != Range(0f, 1f)");
            return;
        }

        foreach (var createPos in _Room.CratePositions)
        {
            if (percent > Range(0.01f, 1f))
            {
                if (createPos.transform.childCount > 0)
                GameObject.Destroy(createPos.transform.GetChild(0).gameObject);
                //var crate = GameObject.Instantiate(WorldManager._Instance._CratePrefab, createPos.transform);

                //crate.transform.SetParent(createPos.transform, false);
            }
            
        }
    }

    public void WithPercentOfObstacles(float percent)
    {
        if (percent < 0f || percent > 1f)
        {
            Debug.LogError("percent != Range(0f, 1f)");
            return;
        }

        foreach (var obstaclePos in _Room.ObstaclePositions)
        {
            if (obstaclePos.transform.childCount > 0) 
                GameObject.Destroy(obstaclePos.transform.GetChild(0).gameObject);

            if (percent > Range(0.01f, 1f))
            {
                GameObject.Instantiate
                    (
                    WorldManager._Instance._ObstaclePrefabs[Range(0, WorldManager._Instance._ObstaclePrefabs.Length)],
                    obstaclePos.transform.position,
                    Quaternion.Euler(0f, Range(-180f, 180f), 0f)
                    );
            }
        }
    }

}